# Generated by Django 5.2.4 on 2025-07-26 17:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0035_statuscomment_statuslike'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='result',
            options={'ordering': ['-uploaded_at']},
        ),
        migrations.AlterModelOptions(
            name='subjectresult',
            options={'ordering': ['subject_name']},
        ),
        migrations.AddField(
            model_name='result',
            name='academic_year',
            field=models.CharField(default='2024-25', max_length=20),
        ),
        migrations.AddField(
            model_name='result',
            name='class_position',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='exam_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='exam_type',
            field=models.CharField(choices=[('Mid Term', 'Mid Term'), ('Final Term', 'Final Term'), ('Unit Test', 'Unit Test'), ('Pre-Board', 'Pre-Board'), ('Board Exam', 'Board Exam'), ('Other', 'Other')], default='Final Term', max_length=50),
        ),
        migrations.AddField(
            model_name='result',
            name='failed_subjects',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='result',
            name='is_published',
            field=models.BooleanField(default=False, help_text='Make result visible to students'),
        ),
        migrations.AddField(
            model_name='result',
            name='passed_subjects',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='result',
            name='percentage',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='published_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='published_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='result',
            name='remarks',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='semester',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='total_students',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='result',
            name='total_subjects',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='is_optional',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='is_passed',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='practical_total',
            field=models.FloatField(blank=True, help_text='Total marks for practical', null=True),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='subject_code',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='theory_total',
            field=models.FloatField(blank=True, help_text='Total marks for theory', null=True),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='total_marks',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='subjectresult',
            name='total_obtained',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='result',
            unique_together={('roll_number', 'student_class', 'exam_type', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='subjectresult',
            unique_together={('result', 'subject_name')},
        ),
        migrations.CreateModel(
            name='GradeScale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=20)),
                ('grade', models.CharField(max_length=5)),
                ('min_marks', models.FloatField()),
                ('max_marks', models.FloatField()),
                ('grade_point', models.FloatField()),
                ('description', models.CharField(blank=True, max_length=50)),
                ('is_pass', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['class_name', '-min_marks'],
                'unique_together': {('class_name', 'grade')},
            },
        ),
        migrations.CreateModel(
            name='ResultAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=20)),
                ('exam_type', models.CharField(max_length=50)),
                ('academic_year', models.CharField(max_length=20)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('passed_students', models.PositiveIntegerField(default=0)),
                ('failed_students', models.PositiveIntegerField(default=0)),
                ('average_gpa', models.FloatField(default=0.0)),
                ('highest_gpa', models.FloatField(default=0.0)),
                ('lowest_gpa', models.FloatField(default=0.0)),
                ('pass_percentage', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Result Analytics',
                'unique_together': {('class_name', 'exam_type', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='ResultTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('exam_type', models.CharField(max_length=50)),
                ('class_name', models.CharField(max_length=20)),
                ('subjects', models.JSONField(help_text='List of subjects with their credit hours and total marks')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubjectPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_name', models.CharField(max_length=100)),
                ('class_name', models.CharField(max_length=20)),
                ('exam_type', models.CharField(max_length=50)),
                ('academic_year', models.CharField(max_length=20)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('passed_students', models.PositiveIntegerField(default=0)),
                ('failed_students', models.PositiveIntegerField(default=0)),
                ('average_marks', models.FloatField(default=0.0)),
                ('highest_marks', models.FloatField(default=0.0)),
                ('lowest_marks', models.FloatField(default=0.0)),
                ('pass_percentage', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Subject Performances',
                'unique_together': {('subject_name', 'class_name', 'exam_type', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='StudentPerformanceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(max_length=50)),
                ('academic_year', models.CharField(max_length=20)),
                ('class_name', models.CharField(max_length=20)),
                ('gpa', models.FloatField()),
                ('total_marks', models.IntegerField()),
                ('class_position', models.PositiveIntegerField(blank=True, null=True)),
                ('total_students', models.PositiveIntegerField(blank=True, null=True)),
                ('performance_status', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Satisfactory', 'Satisfactory'), ('Needs Improvement', 'Needs Improvement')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_history', to='core.student')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('student', 'exam_type', 'academic_year')},
            },
        ),
    ]
